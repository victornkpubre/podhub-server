"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIsFollowing = exports.getPrivatePlaylistAudios = exports.getPlaylistAudios = exports.getFollowingsProfile = exports.getFollowersProfilePublic = exports.getFollowersProfile = exports.getAutoGeneratedPlaylist = exports.generateAutoPlaylist = exports.getRecommendByProfile = exports.getPublicPlaylist = exports.getPublicProfile = exports.getPublicUploads = exports.getUploads = exports.UpdateFollowings = void 0;
const mongoose_1 = require("mongoose");
const user_1 = __importDefault(require("../models/user"));
const audio_1 = __importDefault(require("../models/audio"));
const playlist_1 = __importDefault(require("../models/playlist"));
const history_1 = __importDefault(require("../models/history"));
const moment_1 = __importDefault(require("moment"));
const helper_1 = require("../utils/helper");
const autoGeneratedPlaylist_1 = __importDefault(require("../models/autoGeneratedPlaylist"));
const preferences_1 = __importDefault(require("../models/preferences"));
const UpdateFollowings = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { profileId } = req.params;
    let status;
    if (!(0, mongoose_1.isValidObjectId)(profileId))
        return res.status(422).json({ error: "Audio is is invalid" });
    const profile = yield user_1.default.findById(profileId);
    if (!profile)
        return res.status(404).json({ error: "Profile not found!" });
    const alreadyAFollower = yield user_1.default.findOne({
        _id: profileId,
        followers: req.user.id
    });
    if (alreadyAFollower) {
        yield user_1.default.updateOne({ _id: profileId }, { $pull: { followers: req.user.id } });
        status = "removed";
    }
    else {
        yield user_1.default.updateOne({ _id: profileId }, { $addToSet: { followers: req.user.id } });
        status = "added";
    }
    if (status === "added") {
        yield user_1.default.updateOne({ _id: req.user.id }, { $addToSet: { followings: profileId } });
    }
    if (status === "removed") {
        yield user_1.default.updateOne({ _id: req.user.id }, { $pull: { followings: profileId } });
    }
    res.json({ status });
});
exports.UpdateFollowings = UpdateFollowings;
const getUploads = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { limit = "0", pageNo = "0" } = req.query;
    console.log(req.user);
    const data = yield audio_1.default.find({ owner: req.user.id })
        .skip(parseInt(limit) * parseInt(pageNo))
        .limit(parseInt(limit))
        .sort("-createdAt");
    const audios = data.map((item) => {
        var _a;
        return {
            id: item._id,
            title: item.title,
            about: item.about,
            file: item.file.url,
            category: item.category,
            poster: item.poster,
            date: (_a = item.poster) === null || _a === void 0 ? void 0 : _a.url,
            owner: { name: req.user.name, id: req.user.id }
        };
    });
    res.json({ audios });
});
exports.getUploads = getUploads;
const getPublicUploads = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { limit = "0", pageNo = "0" } = req.query;
    const { profileId } = req.params;
    console.log(req.user);
    if (!(0, mongoose_1.isValidObjectId)(profileId))
        return res.status(422).json({ error: "Audio is is invalid" });
    const data = yield audio_1.default.find({ owner: profileId })
        .skip(parseInt(limit) * parseInt(pageNo))
        .limit(parseInt(limit))
        .sort("-createdAt")
        .populate("owner");
    const audios = data.map((item) => {
        var _a, _b;
        return {
            id: item._id,
            title: item.title,
            about: item.about,
            file: item.file.url,
            poster: (_a = item.poster) === null || _a === void 0 ? void 0 : _a.url,
            date: (_b = item.poster) === null || _b === void 0 ? void 0 : _b.url,
            owner: { name: item.owner.name, id: item.owner._id }
        };
    });
    res.json({ audios });
});
exports.getPublicUploads = getPublicUploads;
const getPublicProfile = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const { profileId } = req.params;
    console.log(profileId);
    if (!(0, mongoose_1.isValidObjectId)(profileId))
        return res.status(422).json({ error: "invalid id" });
    const user = yield user_1.default.findById(profileId);
    if (!user)
        return res.status(422).json({ error: "User not found" });
    res.json({ profile: {
            id: user._id,
            name: user.name,
            followers: user.followers.length,
            avatar: (_a = user.avatar) === null || _a === void 0 ? void 0 : _a.url
        } });
});
exports.getPublicProfile = getPublicProfile;
const getPublicPlaylist = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { limit = "0", pageNo = "0" } = req.query;
    const { profileId } = req.params;
    if (!(0, mongoose_1.isValidObjectId)(profileId))
        return res.status(422).json({ error: "Audio is is invalid" });
    const playlist = yield playlist_1.default.find({
        owner: profileId,
        visibility: "public"
    })
        .skip(parseInt(limit) * parseInt(pageNo))
        .limit(parseInt(limit))
        .sort("-createdAt");
    const audios = playlist.map((item) => {
        return {
            id: item._id,
            title: item.title,
            itemCount: item.items.length,
            visibility: item.visibility
        };
    });
    res.json({ playlist: audios });
});
exports.getPublicPlaylist = getPublicPlaylist;
const getRecommendByProfile = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const user = req.user;
    console.log(user);
    let matchOptions = { $match: { _id: { $exists: true } } };
    if (user) {
        const usersPreviousHistory = yield history_1.default.aggregate([
            { $match: { owner: user.id } },
            { $unwind: "$all" },
            { $match: {
                    "all.date": {
                        $gte: (0, moment_1.default)().subtract(30, "days").toDate()
                    }
                } },
            { $group: { _id: "$all.audio" } },
            { $lookup: {
                    from: "audios",
                    localField: "_id",
                    foreignField: "_id",
                    as: "audioData"
                } },
            { $unwind: "$audioData" },
            { $group: {
                    _id: null,
                    category: {
                        $addToSet: "$audioData.category"
                    }
                } },
        ]);
        if (usersPreviousHistory === null || usersPreviousHistory === void 0 ? void 0 : usersPreviousHistory.length) {
            const categories = usersPreviousHistory[0].category;
            if (categories.length) {
                matchOptions = { $match: { category: { $in: categories } } };
            }
        }
    }
    const audios = yield audio_1.default.aggregate([
        matchOptions,
        { $sort: {
                "likes.count": -1
            } },
        { $limit: 10 },
        { $lookup: {
                from: "users",
                localField: "owner",
                foreignField: "_id",
                as: "owner"
            } },
        { $unwind: "$owner" },
        { $project: {
                _id: 0,
                id: "$_id",
                title: "$title",
                category: "$category",
                about: "$about",
                file: "$file",
                poster: "$poster",
                owner: { name: "$owner.name", id: "$owner._id" }
            } }
    ]);
    res.json({ audios });
});
exports.getRecommendByProfile = getRecommendByProfile;
const generateAutoPlaylist = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const user = req.user;
    if (user) {
        console.log("User verfied");
        const pref = yield preferences_1.default.findOne({ owner: user.id });
        let preferences;
        if (pref) {
            preferences = pref.preferences;
        }
        else {
            preferences = ["Education"];
        }
        console.log("Preferences: " + preferences);
        const playlist = yield autoGeneratedPlaylist_1.default.findOne({
            title: "Mix - " + preferences.join(", ")
        });
        if (!playlist) {
            console.log("Generating Playlist");
            const audios = yield audio_1.default.aggregate([
                { $match: {
                        category: { $in: preferences }
                    } },
                { $project: {
                        _id: 0,
                        id: "$_id"
                    } }
            ]);
            const list = audios.map((item) => item.id);
            const newPlaylist = yield autoGeneratedPlaylist_1.default.create({
                title: "Mix - " + preferences.join(", "),
                items: list
            });
            return res.json({ newPlaylist });
        }
        else {
            console.log("Found Playlist");
            return res.json({ playlist });
        }
    }
    res.status(404).json({ error: "Unauthorized Access" });
});
exports.generateAutoPlaylist = generateAutoPlaylist;
const getAutoGeneratedPlaylist = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const [result] = yield history_1.default.aggregate([
        { $match: { owner: req.user.id } },
        { $unwind: "$all" },
        { $group: { _id: "$all.audio", items: { $addToSet: "$all.audio" } } },
        { $sample: { size: 20 } },
        { $group: { _id: null, items: { $push: "$_id" } } },
    ]);
    const title = "Made For You";
    if (result) {
        yield playlist_1.default.updateOne({ owner: req.user.id, title }, { $set: { title, items: result.items, visibility: "auto" } }, { upsert: true });
    }
    const categories = yield (0, helper_1.getUserPreviousHistory)(req);
    let matchOptions = {
        $match: { _id: { $exists: true } }
    };
    if (categories.length) {
        matchOptions = { $match: { title: { $in: categories } } };
    }
    const agpl = yield autoGeneratedPlaylist_1.default.aggregate([
        matchOptions,
        { $sample: { size: 4 } },
        { $project: {
                _id: 0,
                id: "$_id",
                title: "$title",
                itemsCount: { $size: "$items" }
            } }
    ]);
    const playlist = agpl;
    res.json({ playlist });
});
exports.getAutoGeneratedPlaylist = getAutoGeneratedPlaylist;
const getFollowersProfile = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { limit = "20", pageNo = "0" } = req.query;
    const [result] = yield user_1.default.aggregate([
        { $match: { _id: req.user.id } },
        { $project: {
                followers: {
                    $slice: [
                        "$followers",
                        parseInt(pageNo) * parseInt(limit),
                        parseInt(limit)
                    ]
                }
            } },
        { $unwind: "$followers" },
        { $lookup: {
                from: "users",
                localField: "followers",
                foreignField: "_id",
                as: "userInfo"
            } },
        { $unwind: "$userInfo" },
        { $group: {
                _id: null,
                followers: {
                    $push: {
                        id: "$userInfo._id",
                        name: "$userInfo.name",
                        avatar: "$userInfo.avatar.url"
                    }
                }
            } }
    ]);
    if (!result) {
        return res.json({ followers: [] });
    }
    res.json({ followers: result.followers });
});
exports.getFollowersProfile = getFollowersProfile;
const getFollowersProfilePublic = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { limit = "20", pageNo = "0" } = req.query;
    const { profileId } = req.params;
    if (!(0, mongoose_1.isValidObjectId)(profileId))
        return res.status(422).json({ error: "Invalid profile id!" });
    const [result] = yield user_1.default.aggregate([
        { $match: { _id: new mongoose_1.Types.ObjectId(profileId) } },
        { $project: {
                followers: {
                    $slice: [
                        "$followers",
                        parseInt(pageNo) * parseInt(limit),
                        parseInt(limit)
                    ]
                }
            } },
        { $unwind: "$followers" },
        { $lookup: {
                from: "users",
                localField: "followers",
                foreignField: "_id",
                as: "userInfo"
            } },
        { $unwind: "$userInfo" },
        { $group: {
                _id: null,
                followers: {
                    $push: {
                        id: "$userInfo._id",
                        name: "$userInfo.name",
                        avatar: "$userInfo.avatar.url"
                    }
                }
            } }
    ]);
    if (!result) {
        return res.json({ followers: [] });
    }
    res.json({ followers: result.followers });
});
exports.getFollowersProfilePublic = getFollowersProfilePublic;
const getFollowingsProfile = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { limit = "20", pageNo = "0" } = req.query;
    const [result] = yield user_1.default.aggregate([
        { $match: { _id: req.user.id } },
        { $project: {
                followings: {
                    $slice: [
                        "$followings",
                        parseInt(pageNo) * parseInt(limit),
                        parseInt(limit)
                    ]
                }
            } },
        { $unwind: "$followings" },
        { $lookup: {
                from: "users",
                localField: "followings",
                foreignField: "_id",
                as: "userInfo"
            } },
        { $unwind: "$userInfo" },
        { $group: {
                _id: null,
                followings: {
                    $push: {
                        id: "$userInfo._id",
                        name: "$userInfo.name",
                        avatar: "$userInfo.avatar.url"
                    }
                }
            } }
    ]);
    if (!result) {
        return res.json({ followings: [] });
    }
    res.json({ followings: result.followings });
});
exports.getFollowingsProfile = getFollowingsProfile;
const getPlaylistAudios = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { limit = "20", pageNo = "0" } = req.query;
    const { playlistId } = req.params;
    if (!(0, mongoose_1.isValidObjectId)(playlistId))
        return res.status(422).json({ error: "Invalid audio id!" });
    const aggregationLogic = [
        { $match: { _id: new mongoose_1.Types.ObjectId(playlistId) } },
        { $project: {
                items: {
                    $slice: [
                        "$items",
                        parseInt(pageNo) * parseInt(limit),
                        parseInt(limit)
                    ]
                },
                title: "$title"
            } },
        { $unwind: "$items" },
        { $lookup: {
                from: "audios",
                localField: "items",
                foreignField: "_id",
                as: "audios"
            } },
        { $unwind: "$audios" },
        { $lookup: {
                from: "users",
                localField: "owner",
                foreignField: "_id",
                as: "userInfo"
            } },
        { $group: {
                _id: { id: "$_id", title: "$title" },
                audios: {
                    $push: {
                        id: "$audios._id",
                        title: "$audios.title",
                        about: "$audios.about",
                        category: "$audios.category",
                        file: "$audios.file.url",
                        poster: "$audios.poster.url",
                        owner: { name: "$userInfo.name", id: "$userInfo._id" }
                    },
                }
            } },
        { $project: {
                _id: 0,
                id: "$_id.id",
                title: "$_id.title",
                audios: "$$ROOT.audios"
            } }
    ];
    const [resultAuto] = yield autoGeneratedPlaylist_1.default.aggregate(aggregationLogic);
    const [resultPlaylist] = yield playlist_1.default.aggregate(aggregationLogic);
    if (resultAuto) {
        return res.json({ list: resultAuto });
    }
    if (resultPlaylist) {
        return res.json({ list: resultPlaylist });
    }
    res.json({ list: [] });
});
exports.getPlaylistAudios = getPlaylistAudios;
const getPrivatePlaylistAudios = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { limit = "20", pageNo = "0" } = req.query;
    const { playlistId } = req.params;
    if (!(0, mongoose_1.isValidObjectId)(playlistId))
        return res.status(422).json({ error: "Invalid audio id!" });
    const aggregationLogic = [
        { $match: { _id: new mongoose_1.Types.ObjectId(playlistId), owner: req.user.id } },
        { $project: {
                items: {
                    $slice: [
                        "$items",
                        parseInt(pageNo) * parseInt(limit),
                        parseInt(limit)
                    ]
                },
                title: "$title"
            } },
        { $unwind: "$items" },
        { $lookup: {
                from: "audios",
                localField: "items",
                foreignField: "_id",
                as: "audios"
            } },
        { $unwind: "$audios" },
        { $lookup: {
                from: "users",
                localField: "owner",
                foreignField: "_id",
                as: "userInfo"
            } },
        { $group: {
                _id: { id: "$_id", title: "$title" },
                audios: {
                    $push: {
                        id: "$audios._id",
                        title: "$audios.title",
                        about: "$audios.about",
                        category: "$audios.category",
                        file: "$audios.file.url",
                        poster: "$audios.poster.url",
                        owner: { name: "$userInfo.name", id: "$userInfo._id" }
                    },
                }
            } },
        { $project: {
                _id: 0,
                id: "$_id.id",
                title: "$_id.title",
                audios: "$$ROOT.audios"
            } }
    ];
    const [result] = yield playlist_1.default.aggregate(aggregationLogic);
    if (!result) {
        return res.json({ followings: [] });
    }
    res.json(result);
});
exports.getPrivatePlaylistAudios = getPrivatePlaylistAudios;
const getIsFollowing = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { profileId } = req.params;
    if (!(0, mongoose_1.isValidObjectId)(profileId))
        return res.status(422).json({ error: "Invalid audio id!" });
    const user = yield user_1.default.findOne({
        _id: profileId, followers: req.user.id
    });
    res.json({ status: user ? true : false });
});
exports.getIsFollowing = getIsFollowing;
